{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor LeftDriveSmart = motor(PORT1, ratio18_1, false);\nmotor RightDriveSmart = motor(PORT10, ratio18_1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);\n\noptical Optical5 = optical(PORT5);\nmotor ArmMotor = motor(PORT8, ratio18_1, false);\n\nmotor ClawMotor = motor(PORT20, ratio18_1, false);\n\nservo SeedServo = servo(Brain.ThreeWirePort.B);\nbumper BumperA = bumper(Brain.ThreeWirePort.A);\nmotor29 WaterMotor = motor29(Brain.ThreeWirePort.C, false);\nmotor DrillMotor = motor(PORT9, ratio18_1, false);\n\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// User defined function\nvoid myblockfunction_Drill_and_Water_System();\n\nint Brain_precision = 0, Console_precision = 0;\n\nfloat myVariable, item;\n\nfloat myList[5];\n\n// User defined function\nvoid myblockfunction_Drill_and_Water_System() {\n  ArmMotor.spin(reverse);\n  waitUntil(BumperA.pressing());\n  ArmMotor.stop();\n  wait(2.0, seconds);\n  ArmMotor.spin(forward);\n  wait(1.0, seconds);\n  ArmMotor.stop();\n  Brain.Screen.print(\"Drill Complete, Dropping Seed\");\n  Brain.Screen.newLine();\n  Drivetrain.driveFor(forward, 100.0, mm, true);\n  Drivetrain.stop();\n  SeedServo.setPosition(90.0 - 50.0, degrees);\n  wait(1.0, seconds);\n  SeedServo.setPosition(-90.0 - 50.0, degrees);\n  Brain.Screen.print(\"Seed Drop Complete, Rotating for Water\");\n  Drivetrain.turnFor(right, 180.0, degrees, true);\n  Drivetrain.driveFor(reverse, 1.0, inches, true);\n  wait(10.0, seconds);\n  Brain.Screen.print(\"Water Complete\");\n  Drivetrain.driveFor(forward, 50.0, mm, true);\n  Drivetrain.turnFor(right, 90.0, degrees, true);\n  Drivetrain.drive(forward);\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  Optical5.gestureDisable();\n  Optical5.setLight(ledState::on);\n  Optical5.setLightPower(50.0, percent);\n  Brain.Screen.print(\"System Start Up\");\n  Brain.Screen.newLine();\n  wait(1.0, seconds);\n  Brain.Screen.print(\"Drive System Start\");\n  Brain.Screen.newLine();\n  wait(1.0, seconds);\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n  while (true) {\n    Drivetrain.drive(forward);\n    if (0.0 < Optical5.hue() && Optical5.hue() < 30.0) {\n      Drivetrain.stop();\n      Brain.Screen.print(\"Color Red Detected\");\n      Brain.Screen.newLine();\n      myblockfunction_Drill_and_Water_System();\n    } else if (Optical5.isNearObject()) {\n      wait(2.0, seconds);\n      Brain.Screen.print(\"Object Detected\");\n      Brain.Screen.newLine();\n      Drivetrain.turnFor(right, 90.0, degrees, true);\n      Drivetrain.drive(forward);\n    } else {\n      Drivetrain.drive(forward);\n    }\n  wait(5, msec);\n  }\n  return 0;\n}\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToBrain_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Brain_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when BumperA pressed\" hat block\nvoid onevent_BumperA_pressed_0() {\n  myList[0] = 0.0;\n  myList[1] = 1.0;\n  myList[2] = 2.0;\n  myList[3] = 3.0;\n  myList[4] = 4.0;item = 0.0;\n  Brain.Screen.newLine();\n  repeat(5) {\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(myList[static_cast<int>(item) - 1]));\n    Brain.Screen.newLine();\n    item = item + 1.0;\n    wait(5, msec);\n  }\n  Brain.Screen.print(\"Completed!\");\n  Brain.Screen.newLine();\n}\n\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n\n  // register event handlers\n  BumperA.pressed(onevent_BumperA_pressed_0);\n\n  wait(15, msec);\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","textLanguage":"cpp","robotConfig":[{"port":[1,10,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[5],"name":"Optical5","customName":false,"deviceType":"Optical","deviceClass":"optical","setting":{},"triportSourcePort":22},{"port":[8],"name":"ArmMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[20],"name":"ClawMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"SeedServo","customName":true,"deviceType":"Servo","deviceClass":"servo","setting":{},"triportSourcePort":22},{"port":[1],"name":"BumperA","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[3],"name":"WaterMotor","customName":true,"deviceType":"Motor393","deviceClass":"motor29","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[9],"name":"DrillMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}
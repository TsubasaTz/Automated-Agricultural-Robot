#pragma region VEXcode Generated Robot Configuration
// Make sure all required headers are included.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>


#include "vex.h"

using namespace vex;

// Brain should be defined by default
brain Brain;


// START V5 MACROS
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \
  } while (!(condition))

#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS


// Robot configuration code.
motor LeftDriveSmart = motor(PORT1, ratio18_1, false);
motor RightDriveSmart = motor(PORT10, ratio18_1, true);
drivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);

optical Optical5 = optical(PORT5);
motor ArmMotor = motor(PORT8, ratio18_1, false);

motor ClawMotor = motor(PORT20, ratio18_1, false);

servo SeedServo = servo(Brain.ThreeWirePort.B);
bumper BumperA = bumper(Brain.ThreeWirePort.A);
motor29 WaterMotor = motor29(Brain.ThreeWirePort.C, false);
motor DrillMotor = motor(PORT9, ratio18_1, false);



// generating and setting random seed
void initializeRandomSeed(){
  int systemTime = Brain.Timer.systemHighResolution();
  double batteryCurrent = Brain.Battery.current();
  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);

  // Combine these values into a single integer
  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;

  // Set the seed
  srand(seed);
}



void vexcodeInit() {

  //Initializing random seed.
  initializeRandomSeed(); 
}


// Helper to make playing sounds from the V5 in VEXcode easier and
// keeps the code cleaner by making it clear what is happening.
void playVexcodeSound(const char *soundName) {
  printf("VEXPlaySound:%s\n", soundName);
  wait(5, msec);
}

#pragma endregion VEXcode Generated Robot Configuration

// Include the V5 Library
#include "vex.h"
  
// Allows for easier use of the VEX Library
using namespace vex;

// User defined function
void myblockfunction_Drill_and_Water_System();

int Brain_precision = 0, Console_precision = 0;

float myVariable, item;

float myList[5];

// User defined function
void myblockfunction_Drill_and_Water_System() {
  ArmMotor.spin(reverse);
  waitUntil(BumperA.pressing());
  ArmMotor.stop();
  wait(2.0, seconds);
  ArmMotor.spin(forward);
  wait(1.0, seconds);
  ArmMotor.stop();
  Brain.Screen.print("Drill Complete, Dropping Seed");
  Brain.Screen.newLine();
  Drivetrain.driveFor(forward, 100.0, mm, true);
  Drivetrain.stop();
  SeedServo.setPosition(90.0 - 50.0, degrees);
  wait(1.0, seconds);
  SeedServo.setPosition(-90.0 - 50.0, degrees);
  Brain.Screen.print("Seed Drop Complete, Rotating for Water");
  Drivetrain.turnFor(right, 180.0, degrees, true);
  Drivetrain.driveFor(reverse, 1.0, inches, true);
  wait(10.0, seconds);
  Brain.Screen.print("Water Complete");
  Drivetrain.driveFor(forward, 50.0, mm, true);
  Drivetrain.turnFor(right, 90.0, degrees, true);
  Drivetrain.drive(forward);
  Brain.Screen.clearScreen();
  Brain.Screen.setCursor(1, 1);
}

// "when started" hat block
int whenStarted1() {
  Optical5.gestureDisable();
  Optical5.setLight(ledState::on);
  Optical5.setLightPower(50.0, percent);
  Brain.Screen.print("System Start Up");
  Brain.Screen.newLine();
  wait(1.0, seconds);
  Brain.Screen.print("Drive System Start");
  Brain.Screen.newLine();
  wait(1.0, seconds);
  Brain.Screen.clearScreen();
  Brain.Screen.setCursor(1, 1);
  while (true) {
    Drivetrain.drive(forward);
    if (0.0 < Optical5.hue() && Optical5.hue() < 30.0) {
      Drivetrain.stop();
      Brain.Screen.print("Color Red Detected");
      Brain.Screen.newLine();
      myblockfunction_Drill_and_Water_System();
    } else if (Optical5.isNearObject()) {
      wait(2.0, seconds);
      Brain.Screen.print("Object Detected");
      Brain.Screen.newLine();
      Drivetrain.turnFor(right, 90.0, degrees, true);
      Drivetrain.drive(forward);
    } else {
      Drivetrain.drive(forward);
    }
  wait(5, msec);
  }
  return 0;
}

// Used to find the format string for printing numbers with the
// desired number of decimal places
const char* printToBrain_numberFormat() {
  // look at the current precision setting to find the format string
  switch(Brain_precision){
    case 0:  return "%.0f"; // 0 decimal places (1)
    case 1:  return "%.1f"; // 1 decimal place  (0.1)
    case 2:  return "%.2f"; // 2 decimal places (0.01)
    case 3:  return "%.3f"; // 3 decimal places (0.001)
    default: return "%f"; // use the print system default for everthing else
  }
}

// "when BumperA pressed" hat block
void onevent_BumperA_pressed_0() {
  myList[0] = 0.0;
  myList[1] = 1.0;
  myList[2] = 2.0;
  myList[3] = 3.0;
  myList[4] = 4.0;item = 0.0;
  Brain.Screen.newLine();
  repeat(5) {
    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(myList[static_cast<int>(item) - 1]));
    Brain.Screen.newLine();
    item = item + 1.0;
    wait(5, msec);
  }
  Brain.Screen.print("Completed!");
  Brain.Screen.newLine();
}


int main() {
  // Initializing Robot Configuration. DO NOT REMOVE!
  vexcodeInit();

  // register event handlers
  BumperA.pressed(onevent_BumperA_pressed_0);

  wait(15, msec);
  // post event registration

  // set default print color to black
  printf("\033[30m");

  // wait for rotation sensor to fully initialize
  wait(30, msec);

  whenStarted1();
}